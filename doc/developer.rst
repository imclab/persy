Developer Documentation
=================================
This is an overview what you might want to know if you want to hack and contribute to persy.

CLI
--------------------------------
A development Option is --setenv. 

.. code-block:: bash
  :linenos:

   . persy --setenv

This sets the environment variables (GIT_DIR, GIT_WORK_TREE) of the parent shell in a way that all git commands execute in the parent shell are operating on the persy git repository. 
Take a look at the help message when using this option.

This is useful if you want to start your own git viewer or want to mess with your data.

Contributing
---------------------------------
If you want to contribute in anyway, please go to github_ or launchpad_.

Dependencies
--------------------------------

At runtime you need the following packages (these names are taken from ubuntu and might differ on other distributions):

 *   git-core - git!
 *   gitk or qgit - graphical git browser
 *   xterm - used for log
 *   librsvg2-common - important for svg graphics
 *   python-gtk2 - the gui framework
 *   python-glade2 - creates the gui
 *   python-notify - notifications
 *   python-pyinotify - to get efficient information about filesystem changes
 *   python-paramiko - ssh library to initialize a remote server

For some actions in the Makefile you also need:

 *   python-sphinx - build the documentation
 *   pandoc - build the manpage

Styleguide
---------------------------------
This is not really a guide, just some guidelines and these are far from complete.
I will add new stuff when needed. 


If you write code (module, class or function), please document it with docstrings. 
persy uses Sphinx to convert the docstrings into a complete code documentation (like this one).

Here is an example for a docstring:

.. code-block:: python
  :linenos:

   def awesome():
   	"""
   	this is a reST formated docstring to describe this function.
   	"""
   	return "awesome"

Code Documentation
---------------------------------
Right now, this is just the autogenerated source code documentation. 
This will improve in the future but is not the first task on the todo list.

Core
_________________________________

.. automodule:: persy_core
   :members: Core, _Core 

PersyConfig
_________________________________

.. automodule:: persy_config
   :members:


PersyGtk
_________________________________

.. automodule:: persy_gtk
.. autoclass:: PersyGtkMenu
   :members:

.. autoclass:: PersyGtk
   :members:

PersyHelper
_________________________________

.. automodule:: persy_helper
.. autoclass:: _PersyHelper
   :members:

PersySSH
_________________________________

.. automodule:: persy_ssh
.. autoclass:: PersySSH
   :members:

Synchronization Classes
_________________________________

.. automodule:: persy_syncer
.. autoclass:: FileChangeHandler
   :members:

.. autoclass:: TheSyncer
   :members:

PersyTalker
_________________________________

.. automodule:: persy_talker
.. autoclass:: Talker
   :members:


PersyVCS
_________________________________

.. automodule:: persy_vcs
.. autoclass:: VCS
   :members:


PuG - the git binding
_________________________________

.. automodule:: pug
.. autoclass:: PuG
   :members:



.. _github: http://github.com/kinkerl/persy
.. _launchpad: https://launchpad.net/persy
